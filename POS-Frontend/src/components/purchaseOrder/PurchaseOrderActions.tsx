import React, { useState, useMemo } from "react";
import {
    confirmPurchaseOrder,
    cancelPurchaseOrder,
    returnPurchaseOrder,
} from "../../api/purchaseOrder/purchaseOrderApi";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faVial, faPrint, faUndoAlt } from "@fortawesome/free-solid-svg-icons";
import PurchaseOrderPrintModal from "./PurchaseOrderPrintModal";
import "../../styles/purchaseOrder/PurchaseOrderActions.css";

interface Props {
    po: any;
    navigate: any;
    setPopup: (popup: any) => void;
    onActionComplete: () => void;
}

const PurchaseOrderActions: React.FC<Props> = ({
    po,
    navigate,
    setPopup,
    onActionComplete,
}) => {
    const [loading, setLoading] = useState(false);
    const [showPrintModal, setShowPrintModal] = useState(false);
    const [showTooltip, setShowTooltip] = useState(false);

    const openConfirmPopup = (message: string, onConfirm: () => void) => {
        setPopup({ type: "confirm", message, onConfirm });
    };

    const canPrint =
        po.status === "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ||
        po.status === "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö QC" ||
        po.status === "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" ||
        (po.status === "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß" && po.qcStatus === "‡∏ú‡πà‡∏≤‡∏ô");

    const handleConfirm = async () => {
        setLoading(true);
        try {
            const token = localStorage.getItem("token") || "";
            const res = await confirmPurchaseOrder(po._id, token);
            if (res.success) {
                setPopup({
                    type: "success",
                    message: "‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                    onConfirm: () => navigate(`/qc/${po._id}`),
                });
                onActionComplete();
            }
        } finally {
            setLoading(false);
        }
    };

    const handleReturn = async () => {
        const token = localStorage.getItem("token") || "";
        const res = await returnPurchaseOrder(po._id, token);
        setPopup({ type: res.success ? "success" : "error", message: res.message });
        onActionComplete();
    };

    const handleCancel = async () => {
        const token = localStorage.getItem("token") || "";
        const res = await cancelPurchaseOrder(po._id, token);
        setPopup({ type: res.success ? "success" : "error", message: res.message });
        onActionComplete();
    };

    const qcStatusSummary = useMemo(() => {
        if (!po.stockLots || po.stockLots.length === 0)
            return { hasPass: false, hasFail: false, hasPending: false, hasReturnPending: false };

        let hasPass = false;
        let hasFail = false;
        let hasPending = false;
        let hasReturnPending = false;

        po.stockLots.forEach((lot: any) => {
            const qc = lot.qcStatus || "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";
            const ret = lot.returnStatus || null;

            if (qc === "‡∏ú‡πà‡∏≤‡∏ô") hasPass = true;
            else if (qc.includes("‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô") || qc === "‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô") hasFail = true;
            else hasPending = true;

            if (ret === "‡∏£‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" || ret === "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô") hasReturnPending = true;
        });

        return { hasPass, hasFail, hasPending, hasReturnPending };
    }, [po.stockLots]);

    const showReturnButton =
        qcStatusSummary.hasReturnPending &&
        !["‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC - ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß", "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC - ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß"].includes(po.status);

    const showGoToQCButton =
        qcStatusSummary.hasPending ||
        (!qcStatusSummary.hasFail && !qcStatusSummary.hasPending);

    const allPassed =
        qcStatusSummary.hasPass &&
        !qcStatusSummary.hasFail &&
        !qcStatusSummary.hasPending;

    return (
        <div className="po-actions">
            {po.status === "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" && (
                <>
                    <button
                        className="po-confirm-button"
                        onClick={handleConfirm}
                        disabled={loading}
                    >
                        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                    </button>
                    <button
                        className="po-cancel-button"
                        onClick={() =>
                            openConfirmPopup("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", handleCancel)
                        }
                    >
                        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </button>
                </>
            )}

            {showReturnButton && (
                <div
                    className="tooltip-container"
                    onMouseEnter={() => setShowTooltip(true)}
                    onMouseLeave={() => setShowTooltip(false)}
                >
                    <button
                        className="po-return-button"
                        onClick={() =>
                            openConfirmPopup("‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ PO ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", handleReturn)
                        }
                    >
                        <FontAwesomeIcon icon={faUndoAlt} /> ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC
                    </button>
                    {showTooltip && (
                        <div className="tooltip-text">
                            üí° ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà ‚Äú‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‚Äù ‡∏´‡∏£‡∏∑‡∏≠ ‚Äú‡∏£‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‚Äù ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                        </div>
                    )}
                </div>
            )}

            {po.status !== "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" &&
                showGoToQCButton &&
                !allPassed && (
                    <button
                        className="qc-go-button"
                        onClick={() => navigate(`/qc/${po._id}`)}
                    >
                        <FontAwesomeIcon icon={faVial} />{" "}
                        {po.qcStatus === "‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô" || po.qcStatus === "‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô"
                            ? "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à QC ‡∏ï‡πà‡∏≠"
                            : "‡πÑ‡∏õ‡∏ï‡∏£‡∏ß‡∏à QC"}
                    </button>
                )}

            {allPassed && (
                <p className="qc-complete-text">‚úÖ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à QC ‡πÅ‡∏•‡πâ‡∏ß</p>
            )}

            {canPrint && (
                <button className="btn-print" onClick={() => setShowPrintModal(true)}>
                    <FontAwesomeIcon icon={faPrint} /> ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                </button>
            )}

            {showPrintModal && (
                <PurchaseOrderPrintModal
                    po={po}
                    onClose={() => setShowPrintModal(false)}
                />
            )}
        </div>
    );
};

export default PurchaseOrderActions;
