import React, { useState } from "react";
import { deactivateStockLot } from "../../../api/stock/stockLotApi";
import "../../../styles/stock/StockLotModal.css";

interface Props {
    product?: any;
    po?: any;
    lots: any[];
    onClose: () => void;
    refreshData: () => void; // ‚úÖ ‡πÉ‡∏ä‡πâ callback ‡∏à‡∏≤‡∏Å parent ‡πÅ‡∏ó‡∏ô reload
}

const StockLotModal: React.FC<Props> = ({ product, po, lots, onClose, refreshData }) => {
    const [showPopup, setShowPopup] = useState(false);
    const [selectedLot, setSelectedLot] = useState<any>(null);
    const [reason, setReason] = useState("");
    const [status, setStatus] = useState("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢");
    const [loading, setLoading] = useState(false);

    // ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï
    const statusOptions = [
        "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢",
        "‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
        "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC",
        "‡∏£‡∏≠‡∏Ñ‡∏±‡∏î‡∏≠‡∏≠‡∏Å",
        "‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
    ];

    // ‡πÄ‡∏õ‡∏¥‡∏î popup ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
    const handleOpenPopup = (lot: any) => {
        setSelectedLot(lot);
        setShowPopup(true);
    };

    // ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï
    const handleDeactivate = async () => {
        if (!selectedLot) return;
        const token = localStorage.getItem("token") || "";

        if (!reason.trim()) {
            alert("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï");
            return;
        }

        setLoading(true);
        try {
            await deactivateStockLot(selectedLot._id, token, { reason, status });
            alert("‚úÖ ‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å parent ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reload ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤
            refreshData();

            setShowPopup(false);
            setReason("");
        } catch (err) {
            console.error(err);
            alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï");
        } finally {
            setLoading(false);
        }
    };

    const getQCClass = (qcStatus: string) => {
        switch (qcStatus) {
            case "‡∏ú‡πà‡∏≤‡∏ô":
                return "qc-pass";
            case "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô":
                return "qc-fail";
            case "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö":
                return "qc-pending";
            case "‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô":
            case "‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô":
                return "qc-partial";
            default:
                return "qc-unknown";
        }
    };

    return (
        <div className="stocklots-modal-overlay" onClick={onClose}>
            <div
                className="stocklots-modal-content"
                onClick={(e) => e.stopPropagation()}
            >
                <h3 className="stocklots-modal-title">
                    {product
                        ? `‡∏•‡πá‡∏≠‡∏ï‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${product.name}`
                        : `‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏ô‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ${po?.purchaseOrderNumber || ""}`}
                </h3>

                <div className="stocklot-table-wrapper">
                    <table className="stocklot-modal-table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Batch</th>
                                <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠</th>
                                <th>‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏</th>
                                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ QC</th>
                                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πá‡∏≠‡∏ï</th>
                                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                            </tr>
                        </thead>
                        <tbody>
                            {lots.length > 0 ? (
                                lots.map((lot, i) => (
                                    <tr key={lot._id}>
                                        <td>{i + 1}</td>
                                        <td>{lot.batchNumber || "-"}</td>
                                        <td>{lot.remainingQty ?? lot.quantity ?? 0}</td>
                                        <td>
                                            {lot.expiryDate
                                                ? new Date(lot.expiryDate).toLocaleDateString("th-TH")
                                                : "-"}
                                        </td>
                                        <td>
                                            <span className={`stocklots-qc-status ${getQCClass(lot.qcStatus)}`}>
                                                {lot.qcStatus || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"}
                                            </span>
                                        </td>
                                        <td>{lot.status || "-"}</td>
                                        <td>
                                            {lot.isActive ? (
                                                <button
                                                    className="danger-btn"
                                                    onClick={() => handleOpenPopup(lot)}
                                                >
                                                    ‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï
                                                </button>
                                            ) : (
                                                <span className="closed-label">‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß</span>
                                            )}
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan={7} style={{ textAlign: "center", padding: "20px" }}>
                                        ‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>

                <button className="close-btn" onClick={onClose}>
                    ‡∏õ‡∏¥‡∏î
                </button>
            </div>

            {/* === Popup ‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï === */}
            {showPopup && (
                <div
                    className="stocklots-modal-popup-overlay"
                    onClick={() => setShowPopup(false)}
                >
                    <div
                        className="stocklots-modal-popup-content"
                        onClick={(e) => e.stopPropagation()}
                    >
                        <h3>üßæ ‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏ï</h3>

                        <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î:</label>
                        <select
                            value={status}
                            onChange={(e) => setStatus(e.target.value)}
                            className="stocklots-modal-popup-select"
                        >
                            {statusOptions.map((opt) => (
                                <option key={opt} value={opt}>
                                    {opt}
                                </option>
                            ))}
                        </select>

                        <label>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:</label>
                        <textarea
                            value={reason}
                            onChange={(e) => setReason(e.target.value)}
                            className="stocklots-modal-popup-textarea"
                            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏ö‡∏ï‡∏≥‡∏´‡∏ô‡∏¥‡∏´‡∏•‡∏±‡∏á QC, ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∏‡∏î, ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏..."
                        />

                        <div className="stocklots-popup-actions">
                            <button
                                className="stocklots-confirm-btn"
                                onClick={handleDeactivate}
                                disabled={loading}
                            >
                                {loading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£..." : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"}
                            </button>
                            <button
                                className="stocklots-cancel-btn"
                                onClick={() => setShowPopup(false)}
                            >
                                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default StockLotModal;
