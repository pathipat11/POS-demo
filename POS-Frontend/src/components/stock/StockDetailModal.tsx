import React, { useState, useEffect } from "react";
import "../../styles/stock/StockDetailModal.css";
import { updateProduct, updateProductImage } from "../../api/product/productApi";
import { updateStock, deleteStock } from "../../api/stock/stock";
import { getWarehouses } from "../../api/product/warehousesApi";
import { useNavigate } from "react-router-dom";
import GlobalPopup from "../layout/GlobalPopup"; // ‚úÖ ‡πÉ‡∏ä‡πâ popup ‡∏Å‡∏•‡∏≤‡∏á

interface StockDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  barcode: string | null;
  stock: any;
  onSuccess: () => void;
}

const StockDetailModal: React.FC<StockDetailModalProps> = ({
  isOpen,
  onClose,
  barcode,
  stock,
  onSuccess,
}) => {
  const [formData, setFormData] = useState<any>(stock?.productId || {});
  const [stockData, setStockData] = useState<any>(stock || {});
  const [activeTab, setActiveTab] = useState<"product" | "stock">("product");
  const [image, setImage] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);

  const [warehouseName, setWarehouseName] = useState<string>("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  const [warehouseId, setWarehouseId] = useState<string>("");

  // ‚úÖ Popup state
  const [message, setMessage] = useState<string>("");
  const [isSuccess, setIsSuccess] = useState<boolean>(true);
  const [showPopup, setShowPopup] = useState<boolean>(false);

  const navigate = useNavigate();

  useEffect(() => {
    if (stock?.productId) setFormData(stock.productId);
    if (stock) setStockData(stock);

    const fetchWarehouse = async () => {
      try {
        const warehouses = await getWarehouses();

        if (stock?.location?._id) {
          const found = warehouses.find((w: any) => w._id === stock.location._id);
          if (found) {
            setWarehouseId(found._id);
            setWarehouseName(found.location);
          }
        } else if (stock?.location?.location) {
          setWarehouseId(stock.location._id);
          setWarehouseName(stock.location.location);
        }
      } catch (err) {
        console.error("‚ùå Error fetching warehouses:", err);
      }
    };
    fetchWarehouse();
  }, [stock]);

  if (!isOpen || !stock) return null;

  const handleProductChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prev: any) => ({ ...prev, [name]: value }));
  };

  const handleStockChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setStockData((prev: any) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const token = localStorage.getItem("token");
    if (!token) return;

    try {
      setLoading(true);

      const updatedStockData = { ...stockData, location: warehouseId };

      await updateProduct(stock.productId._id, formData);
      if (stock?.barcode) {
        await updateStock(stock.barcode, updatedStockData);
      }
      if (image) {
        const formDataUpload = new FormData();
        formDataUpload.append("image", image);
        await updateProductImage(formDataUpload, token);
      }

      setMessage("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ");
      setIsSuccess(true);
      setShowPopup(true);
      onSuccess();
    } catch (err) {
      console.error("‚ùå Update error:", err);
      setMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚ùå");
      setIsSuccess(false);
      setShowPopup(true);
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    const token = localStorage.getItem("token");
    if (!token) return;

    try {
      setLoading(true);

      await deleteStock(stock.barcode);

      setMessage("‡∏•‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üóëÔ∏è");
      setIsSuccess(true);
      setShowPopup(true);
      onSuccess();

      setTimeout(() => {
        onClose();
      }, 3000);
    } catch (err) {
      console.error("‚ùå Delete error:", err);
      setMessage("‡∏•‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚ùå");
      setIsSuccess(false);
      setShowPopup(true);
    } finally {
      setLoading(false);
    }
  };


  return (
    <div className="product-detail-modal-overlay">
      <div className="product-detail-modal-content">
        <button className="modal-close" onClick={onClose}>‚úñ</button>
        <h2>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h2>

        {/* Tabs */}
        <div className="tabs">
          <button
            className={activeTab === "product" ? "tab active" : "tab"}
            onClick={() => setActiveTab("product")}
          >
            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          </button>
          <button
            className={activeTab === "stock" ? "tab active" : "tab"}
            onClick={() => setActiveTab("stock")}
          >
            ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å
          </button>
        </div>

        <form onSubmit={handleSubmit} className="stock-detail-form">
          {/* --- PRODUCT TAB --- */}
          {activeTab === "product" && (
            <div className="tab-content">
              <div className="stock-form-group">
                <label>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
                <input type="text" name="name" value={formData?.name || ""} onChange={handleProductChange} />
              </div>
              <div className="stock-form-group">
                <label>‡∏£‡∏≤‡∏Ñ‡∏≤:</label>
                <input type="number" name="price" value={formData?.price || ""} onChange={handleProductChange} />
              </div>
              <div className="stock-form-group">
                <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
                <input type="text" name="description" value={formData?.description || ""} onChange={handleProductChange} />
              </div>
              <div className="stock-form-group">
                <label>‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:</label>
                <input type="text" value={formData?.category?.name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"} readOnly />
              </div>

              <div className="stock-form-group">
                <label>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
                <input type="file" accept="image/*" onChange={(e) => e.target.files && setImage(e.target.files[0])} />
              </div>
              {(image || formData?.imageUrl) && (
                <img
                  src={image ? URL.createObjectURL(image) : formData.imageUrl}
                  alt="preview"
                  className="stock-product-preview"
                />
              )}
            </div>
          )}

          {/* --- STOCK TAB --- */}
          {activeTab === "stock" && (
            <div className="tab-content">
              <div className="stock-form-group">
                <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å:</label>
                <input type="number" name="quantity" value={stockData?.quantity || 0} onChange={handleStockChange} />
              </div>
              <div className="stock-form-group">
                <label>‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏ï‡πá‡∏≠‡∏Å:</label>
                <input type="number" name="threshold" value={stockData?.threshold || 0} onChange={handleStockChange} />
              </div>
              <div className="stock-form-group">
                <label>‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå:</label>
                <input
                  type="text"
                  value={stockData?.supplier || stockData?.supplierId?.companyName || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
                  readOnly
                />
              </div>
              <div className="stock-form-group">
                <label>‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:</label>
                <input type="text" value={warehouseName || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"} readOnly />
              </div>

              <button type="button" className="stock-import-btn" onClick={() => navigate("/createOrder")}>
                üì• ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
              </button>
            </div>
          )}

          {/* --- ACTIONS --- */}
          <div className="stock-form-actions">
            <button type="button" className="delete-btn" onClick={handleDelete}>
              ‡∏•‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
            </button>
            <button type="submit" className={`save-btn ${loading ? "loading" : ""}`} disabled={loading}>
              {loading ? <span className="spinner"></span> : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"}
            </button>
          </div>
        </form>
      </div>

      {/* ‚úÖ GlobalPopup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö success/error */}
      <GlobalPopup
        message={message}
        isSuccess={isSuccess}
        show={showPopup}
        setShow={setShowPopup}
        onClose={onClose}   // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      />

    </div>
  );
};

export default StockDetailModal;
