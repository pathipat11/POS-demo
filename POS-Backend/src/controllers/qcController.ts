import { Request, Response } from "express";
import mongoose from "mongoose";
import QC from "../models/QualityControl";
import Product from "../models/Product";
import Stock from "../models/Stock";
import StockLot from "../models/StockLot";
import Supplier from "../models/Supplier";
import Warehouse from "../models/Warehouse";
import PurchaseOrder from "../models/PurchaseOrder";
import StockTransaction from "../models/StockTransaction";
import cloudinary from "../utils/cloudinary";
import { verifyToken } from "../utils/auth";
import { updateStockTotalFromLots } from "../utils/qcHelpers";

/* =========================================================
   Helpers
========================================================= */
function getUserIdFromReq(req: Request): string | null {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return null;
    const decoded = verifyToken(token);
    if (typeof decoded === "string" || !("userId" in decoded)) return null;
    return decoded.userId as string;
}

/* =========================================================
   CREATE QC RECORD (‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô StockLot)
   ‚ùóÔ∏è‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ stock ‡∏´‡∏£‡∏∑‡∏≠ transaction ‡πÅ‡∏•‡πâ‡∏ß
========================================================= */
export const createQCRecord = async (req: Request, res: Response): Promise<void> => {
    try {
        const userId = getUserIdFromReq(req);
        if (!userId) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const {
            batchNumber,
            productId,
            supplierId,
            warehouseId,
            temperature,
            humidity,
            status,
            issues,
            remarks,
            expiryDate, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
        } = req.body;

        if (!batchNumber || !productId || !supplierId || !warehouseId) {
            res.status(400).json({ success: false, message: "Missing required fields" });
            return;
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        const [product, supplier, warehouse] = await Promise.all([
            Product.findById(productId),
            Supplier.findById(supplierId),
            Warehouse.findById(warehouseId),
        ]);

        if (!product || !supplier || !warehouse) {
            res.status(404).json({
                success: false,
                message: "Product / Supplier / Warehouse not found",
            });
            return;
        }

        const lot = await StockLot.findOne({ batchNumber });
        if (!lot) {
            res
                .status(404)
                .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö batchNumber" });
            return;
        }

        // ‚úÖ Upload attachments (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        let attachments: { url: string; public_id: string }[] = [];
        if (req.files && Object.keys(req.files).length > 0) {
            const list = Array.isArray(req.files)
                ? req.files
                : Object.values(req.files).flat();
            for (const file of list as any[]) {
                const result = await cloudinary.uploader.upload(file.path, { folder: "qc" });
                attachments.push({ url: result.secure_url, public_id: result.public_id });
            }
        }

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á QC record
        const qcRecord = await QC.create({
            batchNumber,
            productId,
            supplierId,
            warehouseId,
            userId,
            temperature,
            humidity,
            status: status || "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
            issues: issues || [],
            remarks,
            attachments,
        });

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï StockLot (‡∏£‡∏ß‡∏° expiryDate)
        lot.qcStatus = status || "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";
        lot.status = "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö QC";
        if (expiryDate) lot.expiryDate = expiryDate;
        await lot.save();

        // ‚úÖ ‡∏î‡∏∂‡∏á StockLot ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        const updatedLot = await StockLot.findOne({ batchNumber });

        // ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á QC record ‡πÅ‡∏•‡∏∞ StockLot
        res.status(201).json({
            success: true,
            message:
                "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô StockLot ‡πÅ‡∏•‡πâ‡∏ß",
            data: {
                qcRecord,
                updatedLot,
            },
        });
    } catch (error) {
        console.error("‚ùå createQCRecord Error:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};



/* =========================================================
   ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC ‡∏ï‡∏≤‡∏° batchNumber (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å StockLot)
========================================================= */
export const getQCByBatch = async (req: Request, res: Response): Promise<void> => {
    try {
        const { batchNumber } = req.params;

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á batch ‡∏ô‡∏±‡πâ‡∏ô
        const qcRecord = await QC.find({ batchNumber })
            .populate("productId", "name barcode")
            .populate("supplierId", "companyName code")
            .populate("warehouseId", "name location")
            .populate("userId", "username email");

        if (!qcRecord || qcRecord.length === 0) {
            res
                .status(404)
                .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏ô‡∏µ‡πâ" });
            return;
        }

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å StockLot
        const lot = await StockLot.findOne({ batchNumber }, "expiryDate");

        // ‚úÖ ‡πÅ‡∏ô‡∏ö expiryDate ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞ record
        const enriched = qcRecord.map((record) => ({
            ...record.toObject(),
            expiryDate: lot?.expiryDate || null,
        }));

        res.status(200).json({ success: true, data: enriched });
    } catch (error) {
        console.error("‚ùå getQCByBatch Error:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

/* =========================================================
   UPDATE QC RECORD (‡πÅ‡∏Ñ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
========================================================= */
export const updateQCRecord = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const { status, remarks } = req.body;
        const userId = getUserIdFromReq(req);
        if (!userId) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const qcRecord = await QC.findById(id);
        if (!qcRecord) {
            res.status(404).json({ success: false, message: "QC Record not found" });
            return;
        }

        const lot = await StockLot.findOne({ batchNumber: qcRecord.batchNumber });
        if (!lot) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
            return;
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ QC
        qcRecord.status = status || qcRecord.status;
        qcRecord.remarks = remarks || qcRecord.remarks;
        await qcRecord.save();

        // ‡πÅ‡∏Ñ‡πà sync ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏•‡πá‡∏≠‡∏ï (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å)
        lot.qcStatus = status || "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";
        await lot.save();

        res.status(200).json({
            success: true,
            message: `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• QC ‡∏•‡πá‡∏≠‡∏ï ${lot.batchNumber} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
            data: qcRecord,
        });
    } catch (error) {
        console.error("‚ùå updateQCRecord Error:", error);
        res.status(500).json({ success: false, message: "Server error while updating QC record" });
    }
};

/* =========================================================
   üß™ UPDATE QC STATUS (‡∏™‡∏£‡∏∏‡∏õ QC ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö + ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô)
========================================================= */
export const updateQCStatus = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const qcStatus = req.body.qcStatus || req.body.status;

        const token = req.header("Authorization")?.split(" ")[1];
        if (!token) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const decoded = verifyToken(token);
        if (typeof decoded === "string" || !("userId" in decoded)) {
            res.status(401).json({ success: false, message: "Invalid token" });
            return;
        }

        const userId = (decoded as any).userId;
        const po = await PurchaseOrder.findById(id);
        if (!po) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" });
            return;
        }

        po.updatedBy = userId;

        // ‚úÖ Helper
        const normalizeQCStatus = (v: string) => (v === "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à" ? "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" : v);
        const mapQCToPOStatus = (qc: string): string => {
            switch (qc) {
                case "‡∏ú‡πà‡∏≤‡∏ô":
                    return "QC ‡∏ú‡πà‡∏≤‡∏ô";
                case "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô":
                    return "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC - ‡∏£‡∏≠‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
                case "‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô":
                case "‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô":
                    return "QC ‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô";
                default:
                    return "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
            }
        };

        let passedCount = 0,
            failedCount = 0,
            restockedCount = 0; // ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ
        const totalCount = po.items?.length || 0;

        // ‚úÖ Loop ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô PO
        for (const item of po.items as any[]) {
            const lot = await StockLot.findOne({ batchNumber: item.batchNumber });
            if (!lot) continue;

            // üîí ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏ï‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°
            if (lot.isStocked === true) {
                item.qcStatus = lot.qcStatus || "‡∏ú‡πà‡∏≤‡∏ô";
                if (lot.qcStatus === "‡∏ú‡πà‡∏≤‡∏ô") passedCount++;
                if (lot.qcStatus === "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô") failedCount++;
                continue;
            }

            // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ QC ‡∏Ç‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏ï
            const status = lot.qcStatus || "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";

            if (status === "‡∏ú‡πà‡∏≤‡∏ô") {
                // ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏ï‡∏¥‡∏°
                lot.status = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢";
                lot.isActive = true;
                lot.isTemporary = false;
                lot.lastRestocked = new Date();

                await Stock.updateOne(
                    { _id: lot.stockId },
                    {
                        $inc: { totalQuantity: lot.quantity },
                        $set: { lastRestocked: new Date() },
                    }
                );

                await StockTransaction.create({
                    stockId: lot.stockId,
                    productId: lot.productId,
                    stockLotId: lot._id,
                    type: "RESTOCK",
                    quantity: lot.quantity,
                    costPrice: lot.costPrice,
                    userId,
                    notes: `‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å | PO ${po.purchaseOrderNumber}`,
                });

                await updateStockTotalFromLots(lot.stockId.toString());

                lot.isStocked = true; // ‚úÖ Mark ‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß
                await lot.save();

                passedCount++;
                restockedCount++;
                item.qcStatus = "‡∏ú‡πà‡∏≤‡∏ô";
            } else if (status === "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô") {
                lot.status = "‡∏£‡∏≠‡∏Ñ‡∏±‡∏î‡∏≠‡∏≠‡∏Å";
                lot.isActive = false;
                lot.isTemporary = true;
                await lot.save();
                failedCount++;
                item.qcStatus = "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô";
            } else {
                item.qcStatus = "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";
            }
        }

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì qcStatus ‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà
        let newQCStatus = "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";
        if (passedCount === totalCount) newQCStatus = "‡∏ú‡πà‡∏≤‡∏ô";
        else if (failedCount === totalCount) newQCStatus = "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô";
        else if (passedCount > 0 && failedCount > 0) newQCStatus = "‡∏ú‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô";
        else if (passedCount > 0 || failedCount > 0) newQCStatus = "‡∏ï‡∏£‡∏ß‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô";

        po.qcStatus = normalizeQCStatus(newQCStatus);
        po.status = mapQCToPOStatus(po.qcStatus);
        po.qcCheckedAt = new Date();
        await po.save();

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡πá‡∏≠‡∏ï‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏•‡∏¢ ‚Üí ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô
        if (passedCount === 0 && failedCount === 0) {
            res.status(400).json({
                success: false,
                message: "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏î‡∏ú‡πà‡∏≤‡∏ô QC ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡∏∏‡∏õ",
            });
            return;
        }

        res.status(200).json({
            success: true,
            message: `‚úÖ ‡∏™‡∏£‡∏∏‡∏õ QC ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${passedCount} ‡∏ú‡πà‡∏≤‡∏ô / ${failedCount} ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô / ‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏´‡∏°‡πà ${restockedCount} ‡∏•‡πá‡∏≠‡∏ï)`,
            data: po,
        });
    } catch (error) {
        console.error("‚ùå Update QC Error:", error);
        res.status(500).json({ success: false, message: "Server error while updating QC" });
    }
};


/**
 * ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC
 * (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏•‡∏ö QC ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LOT/Stock ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
 */
export const deleteQCRecord = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const qcRecord = await QC.findByIdAndDelete(id);
        if (!qcRecord) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC" });
            return;
        }
        res.status(200).json({ success: true, message: "üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
    } catch (error) {
        console.error("‚ùå deleteQCRecord Error:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

