import { Request, Response } from "express";
import mongoose from "mongoose";
import QC from "../models/QualityControl";
import Product from "../models/Product";
import Stock from "../models/Stock";
import StockLot from "../models/StockLot";
import Supplier from "../models/Supplier";
import Warehouse from "../models/Warehouse";
import PurchaseOrder from "../models/PurchaseOrder";
import StockTransaction from "../models/StockTransaction";
import cloudinary from "../utils/cloudinary";
import { verifyToken } from "../utils/auth";
import { updateStockTotalFromLots } from "../utils/qcHelpers";

/* =========================================================
   Helpers
========================================================= */
function getUserIdFromReq(req: Request): string | null {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return null;
    const decoded = verifyToken(token);
    if (typeof decoded === "string" || !("userId" in decoded)) return null;
    return decoded.userId as string;
}

/* =========================================================
   ‚úÖ CREATE QC RECORD (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ)
   ‚ùóÔ∏è‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï stock ‡∏´‡∏£‡∏∑‡∏≠ transaction ‡πÅ‡∏•‡πâ‡∏ß
========================================================= */
export const createQCRecord = async (req: Request, res: Response): Promise<void> => {
    try {
        const userId = getUserIdFromReq(req);
        if (!userId) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const {
            batchNumber,
            productId,
            supplierId,
            warehouseId,
            temperature,
            humidity,
            status,
            issues,
            remarks,
        } = req.body;

        if (!batchNumber || !productId || !supplierId || !warehouseId) {
            res.status(400).json({ success: false, message: "Missing required fields" });
            return;
        }

        const [product, supplier, warehouse] = await Promise.all([
            Product.findById(productId),
            Supplier.findById(supplierId),
            Warehouse.findById(warehouseId),
        ]);
        if (!product || !supplier || !warehouse) {
            res.status(404).json({ success: false, message: "Product / Supplier / Warehouse not found" });
            return;
        }

        const lot = await StockLot.findOne({ batchNumber });
        if (!lot) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö batchNumber" });
            return;
        }

        // ‚úÖ Upload ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        let attachments: { url: string; public_id: string }[] = [];
        if (req.files && Object.keys(req.files).length > 0) {
            const list = Array.isArray(req.files) ? req.files : Object.values(req.files).flat();
            for (const file of list as any[]) {
                const result = await cloudinary.uploader.upload(file.path, { folder: "qc" });
                attachments.push({ url: result.secure_url, public_id: result.public_id });
            }
        }

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• QC record
        const qcRecord = await QC.create({
            batchNumber,
            productId,
            supplierId,
            warehouseId,
            userId,
            temperature,
            humidity,
            status: status || "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à",
            issues: issues || [],
            remarks,
            attachments,
        });

        // ‚úÖ ‡πÅ‡∏Ñ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÉ‡∏ô‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏â‡∏¢ ‡πÜ (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ stock)
        lot.qcStatus = status || "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";
        lot.status = "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö QC";
        await lot.save();

        res.status(201).json({
            success: true,
            message: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            data: qcRecord,
        });
    } catch (error) {
        console.error("‚ùå createQCRecord Error:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

/* =========================================================
   ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC ‡∏ï‡∏≤‡∏° batchNumber
========================================================= */
export const getQCByBatch = async (req: Request, res: Response): Promise<void> => {
    try {
        const { batchNumber } = req.params;
        const qcRecord = await QC.find({ batchNumber })
            .populate("productId", "name barcode")
            .populate("supplierId", "companyName code")
            .populate("warehouseId", "name location")
            .populate("userId", "username email");

        if (!qcRecord || qcRecord.length === 0) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏ô‡∏µ‡πâ" });
            return;
        }

        res.status(200).json({ success: true, data: qcRecord });
    } catch (error) {
        console.error("‚ùå getQCByBatch Error:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};

/* =========================================================
   ‚úÖ UPDATE QC RECORD (‡πÅ‡∏Ñ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡πá‡∏≠‡∏ï‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
========================================================= */
export const updateQCRecord = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const { status, remarks } = req.body;
        const userId = getUserIdFromReq(req);
        if (!userId) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const qcRecord = await QC.findById(id);
        if (!qcRecord) {
            res.status(404).json({ success: false, message: "QC Record not found" });
            return;
        }

        const lot = await StockLot.findOne({ batchNumber: qcRecord.batchNumber });
        if (!lot) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
            return;
        }

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ QC
        qcRecord.status = status || qcRecord.status;
        qcRecord.remarks = remarks || qcRecord.remarks;
        await qcRecord.save();

        // ‚úÖ ‡πÅ‡∏Ñ‡πà sync ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏•‡πá‡∏≠‡∏ï (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å)
        lot.qcStatus = status || "‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö";
        await lot.save();

        res.status(200).json({
            success: true,
            message: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏• QC ‡∏•‡πá‡∏≠‡∏ï ${lot.batchNumber} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
            data: qcRecord,
        });
    } catch (error) {
        console.error("‚ùå updateQCRecord Error:", error);
        res.status(500).json({ success: false, message: "Server error while updating QC record" });
    }
};

/* =========================================================
   üß™ UPDATE QC STATUS (‡∏™‡∏£‡∏∏‡∏õ QC ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö + ‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á)
========================================================= */
export const updateQCStatus = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params; // PO ID
        const qcStatus = req.body.qcStatus || req.body.status;

        const token = req.header("Authorization")?.split(" ")[1];
        if (!token) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const decoded = verifyToken(token);
        if (typeof decoded === "string" || !("userId" in decoded)) {
            res.status(401).json({ success: false, message: "Invalid token" });
            return;
        }
        const userId = (decoded as any).userId;

        const po = await PurchaseOrder.findById(id);
        if (!po) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" });
            return;
        }

        // üß© ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ã‡πâ‡∏≥
        if (po.status === "QC ‡∏ú‡πà‡∏≤‡∏ô") {
            res.status(400).json({
                success: false,
                message: "‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏ú‡πà‡∏≤‡∏ô QC ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ",
            });
            return;
        }

        po.qcStatus = qcStatus;
        po.updatedBy = userId;

        if (qcStatus === "‡∏ú‡πà‡∏≤‡∏ô") {
            for (const item of po.items as any[]) {
                const lot = await StockLot.findOne({ batchNumber: item.batchNumber });
                if (!lot) continue;

                // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
                if (lot.qcStatus === "‡∏ú‡πà‡∏≤‡∏ô" && lot.isActive) continue;

                lot.status = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢";
                lot.qcStatus = "‡∏ú‡πà‡∏≤‡∏ô";
                lot.isActive = true;
                lot.isTemporary = false;
                lot.quantity = item.quantity;
                lot.lastRestocked = new Date();
                await lot.save();

                // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏ï‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                const existingTxn = await StockTransaction.findOne({
                    stockLotId: lot._id,
                    type: "RESTOCK",
                    notes: { $regex: "QC ‡∏ú‡πà‡∏≤‡∏ô", $options: "i" },
                });

                if (!existingTxn) {
                    await Stock.updateOne(
                        { _id: lot.stockId },
                        { $inc: { totalQuantity: item.quantity }, $set: { lastRestocked: new Date() } }
                    );

                    await StockTransaction.create({
                        stockId: lot.stockId,
                        productId: lot.productId,
                        stockLotId: lot._id,
                        type: "RESTOCK",
                        quantity: item.quantity,
                        costPrice: lot.costPrice,
                        userId,
                        notes: `QC ‡∏ú‡πà‡∏≤‡∏ô | PO ${po.purchaseOrderNumber} | Batch ${lot.batchNumber}`,
                    });

                    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡∏∏‡∏õ QC)
                    await updateStockTotalFromLots(lot.stockId.toString());
                }
            }

            po.status = "QC ‡∏ú‡πà‡∏≤‡∏ô";
            po.qcCheckedAt = new Date();
        } else if (qcStatus === "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô") {
            const batchNumbers = po.items.map((x: any) => x.batchNumber);
            await StockLot.updateMany(
                { batchNumber: { $in: batchNumbers } },
                { $set: { status: "‡∏£‡∏≠‡∏Ñ‡∏±‡∏î‡∏≠‡∏≠‡∏Å", qcStatus: "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô", isActive: false, isTemporary: true } }
            );
            po.status = "‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô QC - ‡∏£‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";
        }

        await po.save();

        res.status(200).json({
            success: true,
            message:
                qcStatus === "‡∏ú‡πà‡∏≤‡∏ô"
                    ? "‚úÖ QC ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß"
                    : "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ QC ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            data: po,
        });
    } catch (error) {
        console.error("‚ùå Update QC Error:", error);
        res.status(500).json({ success: false, message: "Server error while updating QC" });
    }
};


/**
 * ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC
 * (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏•‡∏ö QC ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏¢‡πâ‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ LOT/Stock ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
 */
export const deleteQCRecord = async (req: Request, res: Response): Promise<void> => {
    try {
        const { id } = req.params;
        const qcRecord = await QC.findByIdAndDelete(id);
        if (!qcRecord) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC" });
            return;
        }
        res.status(200).json({ success: true, message: "üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QC ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
    } catch (error) {
        console.error("‚ùå deleteQCRecord Error:", error);
        res.status(500).json({ success: false, message: "Server error" });
    }
};
