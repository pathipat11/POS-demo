import { Request, Response } from "express";
import Payment from "../models/Payment";
import Receipt from "../models/Receipt";
import { verifyToken } from "../utils/auth";

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
export const createPayment = async (req: Request, res: Response): Promise<void> => {
    try {
        const token = req.header("Authorization")?.split(" ")[1];
        if (!token) {
            res.status(401).json({ success: false, message: "Unauthorized" });
            return;
        }

        const decoded = verifyToken(token);
        if (typeof decoded === "string" || !("userId" in decoded)) {
            res.status(401).json({ success: false, message: "Invalid token" });
            return;
        }

        const {
            saleId,
            employeeName,
            paymentMethod,
            amountReceived,
            amount,
            items,
            isReturn = false, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            reason,
        } = req.body;

        if (!saleId || !employeeName || !paymentMethod || !amount || !items) {
            res.status(400).json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
            return;
        }

        // ‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô)
        const paymentType = isReturn ? "REFUND" : "SALE";

        // ‚úÖ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Payment
        const newPayment = new Payment({
            saleId,
            employeeName,
            paymentMethod,
            type: paymentType,
            amountReceived,
            amount: isReturn ? -Math.abs(amount) : Math.abs(amount), // üíµ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∑‡∏ô ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            status: "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            notes: isReturn ? `‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (${reason || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•"})` : undefined,
        });

        await newPayment.save();

        // ‚úÖ 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° / ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô
        const totalPrice = items.reduce((total: number, item: any) => total + item.subtotal, 0);
        let changeAmount = 0;
        if (!isReturn && paymentMethod === "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î" && amountReceived) {
            changeAmount = amountReceived - totalPrice;
        }

        // ‚úÖ 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        const newReceipt = new Receipt({
            paymentId: newPayment._id,
            employeeName,
            items,
            totalPrice: isReturn ? -Math.abs(totalPrice) : Math.abs(totalPrice),
            paymentMethod,
            amountPaid: amountReceived,
            changeAmount,
            timestamp: new Date(),
            profit: isReturn
                ? -items.reduce((sum: number, i: any) => sum + (i.profit || 0), 0)
                : items.reduce((sum: number, i: any) => sum + (i.profit || 0), 0),
            ...(isReturn && { isReturn: true, returnReason: reason }),
        });

        await newReceipt.save();

        // ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Payment ‡πÉ‡∏´‡πâ‡∏ä‡∏µ‡πâ‡∏Å‡∏•‡∏±‡∏ö Receipt
        newPayment.receiptId = newReceipt._id;
        await newPayment.save();

        // ‚úÖ 5. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
        res.status(201).json({
            success: true,
            message: isReturn
                ? "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                : "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            payment: newPayment,
            receipt: newReceipt,
        });
    } catch (error) {
        console.error("‚ùå Error in createPayment:", error);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", error });
    }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllPayments = async (_: Request, res: Response): Promise<void> => {
    try {
        const payments = await Payment.find().populate("receiptId").sort({ createdAt: -1 });

        if (!payments.length) {
            res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" });
            return;
        }

        res.status(200).json({ success: true, data: payments });
    } catch (error) {
        console.error("Error retrieving all payments:", error);
        res.status(500).json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", error });
    }
};
