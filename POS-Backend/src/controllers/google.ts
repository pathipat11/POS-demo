<<<<<<< HEAD
import { Request, Response } from 'express';
import { OAuth2Client } from 'google-auth-library';
import User from '../models/User';  // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ Mongoose ‡∏´‡∏£‡∏∑‡∏≠ ORM ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
import jwt from 'jsonwebtoken';

const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);
export const googleLogin = async (req: Request, res: Response): Promise<void> => {
  const { googleToken } = req.body;

  try {
    const ticket = await client.verifyIdToken({
      idToken: googleToken,
      audience: process.env.GOOGLE_CLIENT_ID,
    });

    const payload = ticket.getPayload();
    const googleEmail = payload?.email;
    const googleId = payload?.sub;

    if (!googleEmail || !googleId) {
      res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google ‡πÑ‡∏î‡πâ' });
      return;
    }

    // üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ email
    let user = await User.findOne({ email: googleEmail });

    if (!user) {
      res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Google ‡∏ô‡∏µ‡πâ' });
      return;
    }

    // üìå ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ googleId ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï googleId ‡πÅ‡∏•‡∏∞ googleToken
    if (!user.googleId) {
      user.googleId = googleId;
      user.googleToken = googleToken;
      await user.save();
    } else if (user.googleId !== googleId) {
      // ‡∏ñ‡πâ‡∏≤ googleId ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‚Üí ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ñ‡∏ô‡∏•‡∏∞‡∏ï‡∏±‡∏ß
      res.status(401).json({ message: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Google ID ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô' });
      return;
    }

    // üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï googleToken ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    user.googleToken = googleToken;
    await user.save();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡πÉ‡∏´‡∏°‡πà
    const token = jwt.sign(
          {
            id: user._id,           // user id
            email: user.email,       // user email
            username: user.username, // username ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            role: user.role,  
            profile_img:user.profile_img,       // role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          },
          process.env.JWT_SECRET as string,
          { expiresIn: '1h' }
        );

    res.json({ token, user });

  } catch (error) {
    console.error('‚ùå Error in Google Login:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Google' });
  }
};



export const googleRegister = async (req: Request, res: Response): Promise<void> => {
  const { googleToken } = req.body;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Token
    const ticket = await client.verifyIdToken({
      idToken: googleToken,
      audience: process.env.GOOGLE_CLIENT_ID,
    });

    const payload = ticket.getPayload();
    const googleEmail = payload?.email;
    const googleId = payload?.sub;
    const firstName = payload?.given_name ?? 'Guest';
    const lastName = payload?.family_name ?? 'User';
    const picture = payload?.picture ?? '';

    if (!googleEmail || !googleId) {
      res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google ‡πÑ‡∏î‡πâ' });
      return;
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    let user = await User.findOne({ googleId });

    if (user) {
      res.status(400).json({ message: '‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß' });
      return;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å googleToken ‡∏î‡πâ‡∏ß‡∏¢
    user = new User({
      email: googleEmail,
      googleId,
      firstName,
      lastName,
      profile_img: picture,
      role: 'user',
      username: firstName,
      googleToken, // üëâ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Google Token ‡∏•‡∏á DB
    });

    await user.save();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const token = jwt.sign(
      { id: user._id, email: user.email },
      process.env.JWT_SECRET || 'yourSecretKey',
      { expiresIn: '1h' }
    );

    res.json({ token, user });

  } catch (error) {
    console.error('Error in Google Register:', error);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢ Google' });
=======
import { Request, Response } from "express";
import { OAuth2Client } from "google-auth-library";

const client = new OAuth2Client("429542474271-omg13rrfbv9aidi9p7c788gsfe8akfsd.apps.googleusercontent.com");

export const verifyGoogleTokenMiddleware = async (req: Request, res: Response): Promise<void> => {
  const { token } = req.body;

  if (!token) {
     res.status(400).json({ error: "Token is required" });
     return;
  }

  try {
    const ticket = await client.verifyIdToken({
      idToken: token,
      audience: "429542474271-omg13rrfbv9aidi9p7c788gsfe8akfsd.apps.googleusercontent.com",
    });

    const payload = ticket.getPayload();
    if (!payload) {
      throw new Error("Invalid token payload");
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô `req.user` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    req.body = payload;
  } catch (error) {
    res.status(401).json({ error: "Invalid Google Token" });
>>>>>>> 53da7cf0ae02369164b1eb52be70513e8700ef81
  }
};
