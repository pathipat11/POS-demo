import { Request, Response } from "express";
import Order from "../models/Order";
import Stock from "../models/Stock";
import StockLot from "../models/StockLot";
import StockTransaction from "../models/StockTransaction";

export const createOrder = async (req: Request, res: Response): Promise<void> => {
    try {
        const { saleId, userId, items, paymentMethod, amount, amountReceived, change } = req.body;

        // ‚úÖ 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Order
        const order = await Order.create({
            saleId,
            userId,
            items,
            paymentMethod,
            amount,
            amountReceived,
            change,
        });

        // ‚úÖ 2. ‡∏ß‡∏ô‡∏•‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        for (const item of items) {
            const stock = await Stock.findOne({ barcode: item.barcode });
            if (!stock) continue;

            const qtyToDeduct = Number(item.quantity) || 0;
            if (qtyToDeduct <= 0) continue;

            if (stock.totalQuantity < qtyToDeduct) {
                throw new Error(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${item.name} ‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢ (‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${stock.totalQuantity})`);
            }

            // ‚úÖ ‡∏î‡∏∂‡∏á lots ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (FIFO)
            const lots = await StockLot.find({
                productId: stock.productId,
                remainingQty: { $gt: 0 },
                status: { $in: ["‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢", "active"] },
            }).sort({ expiryDate: 1, createdAt: 1 });

            let remainingToDeduct = qtyToDeduct;

            for (const lot of lots) {
                if (remainingToDeduct <= 0) break;

                const deductQty = Math.min(lot.remainingQty, remainingToDeduct);

                lot.remainingQty -= deductQty;
                remainingToDeduct -= deductQty;

                // ‡∏ñ‡πâ‡∏≤ lot ‡∏´‡∏°‡∏î remainingQty ‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                if (lot.remainingQty <= 0) {
                    lot.status = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î";
                    lot.isClosed = true;
                }

                await lot.save();

                // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á StockTransaction (‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï‡∏•‡∏á‡πÉ‡∏ô notes ‡πÄ‡∏î‡∏¥‡∏°)
                const expiryText = lot.expiryDate
                    ? `‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${new Date(lot.expiryDate).toLocaleDateString("th-TH")}`
                    : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏";

                await StockTransaction.create({
                    stockId: stock._id,
                    productId: stock.productId,
                    lotId: lot._id,
                    type: "SALE",
                    quantity: deductQty,
                    referenceId: order._id,
                    userId,
                    salePrice: item.price,
                    notes: `‡∏Ç‡∏≤‡∏¢‡∏•‡πá‡∏≠‡∏ï ${lot.batchNumber || lot._id} (${deductQty} ‡∏ä‡∏¥‡πâ‡∏ô) | ${expiryText} | Order: ${saleId}`,
                });

                console.log(`üßæ ‡∏ï‡∏±‡∏î‡∏•‡πá‡∏≠‡∏ï ${lot.batchNumber} ‡∏≠‡∏≠‡∏Å ${deductQty} ‡∏ä‡∏¥‡πâ‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${lot.remainingQty})`);
            }

            // ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤ lot ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢
            if (remainingToDeduct > 0) {
                throw new Error(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${item.name} ‡πÉ‡∏ô‡∏•‡πá‡∏≠‡∏ï‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢ (‡∏Ç‡∏≤‡∏î ${remainingToDeduct} ‡∏ä‡∏¥‡πâ‡∏ô)`);
            }

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Stock ‡∏´‡∏•‡∏±‡∏Å
            stock.totalQuantity -= qtyToDeduct;

            // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            if (stock.totalQuantity <= 0) {
                stock.status = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î";
                stock.isActive = false;
            } else if (stock.threshold && stock.totalQuantity <= stock.threshold) {
                stock.status = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢";
            } else {
                stock.status = "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢";
            }

            await stock.save();

            console.log(`üì¶ Stock Updated: ${item.name} (-${qtyToDeduct})`);
        }

        res.status(201).json({
            success: true,
            message: "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Order ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏ô Transaction)",
            data: order,
        });
    } catch (error: any) {
        console.error("‚ùå Create Order Error:", error);
        res.status(500).json({
            success: false,
            message: error.message || "Server error while creating order",
        });
    }
};
